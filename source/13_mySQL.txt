====================
 mySQL入門
====================

mySQLとは
============================

| mySQLはリレーショナルデータベースマネジメントシステムの一種です。
| 世界で最も普及しているオープンソース・データベースでもあります。
| 
| mySQLを利用することでPHPなどで利用するデータを保存や管理することができます。
| 

リレーショナルデータベースを利用するメリット
========================================================

| データベースは巨大なデータを効率よく利用することが出来ます。
| 全データを読み込まなくても必要なデータをピンポイントで取り出すことが出来ます。
|
| リレーショナルデータベースは、行と列で構成される表で表現できるような関係性を持ったデータを管理するのに特に向いています。
| 


リレーショナルデータベースの構造
==================================================

「会員」

======== ======= ==============================
会員番号    年齢    名前
======== ======= ==============================
 0        25      山本健介
 1        36      川島忠
 2        82      梅沢誠信
 3        19      今井幸太
 4        45      森田和一
 5        65      花澤三郎
======== ======= ==============================


| データベース中にはこのような構造の表を複数入れることが出来ます。
| この表のことをテーブルと言います。
| テーブル名は「会員」になります。
| 各列の名前である「会員番号」、「年齢」、「名前」のことをカラム名と言います。
| 


.. note::

    実際には日本語のテーブル名やカラム名はあまり使われません。英字を使用するようにしましょう。


| 上記の例で、会員番号は同じ番号が複数回現れることはありません。
| このようなカラムのことを主キー（プライマリーキー）と呼びます。
| プライマリーキーの特徴は
| ・値の重複がない
| ・データは必ず入力しなければならない
| ことです。
| プライマリーキーには数字の連番が使われることも多いです。


SQLを操作してみよう
==========================================

| Windowsならコマンドプロンプト、Macならターミナルを開いて、
| mysqlにアクセスしましょう。
| 
| XAMPP環境の場合（初期値）



.. code-block:: bat

    cd C:\xampp\mysql\bin
    mysql -h localhost -u root

| MAMP環境の場合（初期値）

.. code-block:: bat

    cd /Applications/MAMP/Library/bin
    ./mysql -u root -p

| MAMP環境の場合、パスワードの初期値がrootとなっているようです。



データベースの作成
============================================

| 
| mySQLにrootでログインしたらデータベースを作ってみましょう。
| 作成するデータベースの名前が「TEST_DB」で、文字コードがUTF-8だとすれば

.. code-block:: mysql

    mysql> CREATE DATABASE TEST_DB CHARACTER SET utf8;

| このようにすることでデータベースを作成することができます。
| データベースの一覧を見るには

.. code-block:: mysql

    mysql> SHOW DATABASES;

| と入力します。
| 「TEST_DB」という名前のデータベースにアクセスするには

.. code-block:: mysql

    mysql> USE TEST_DB;

| と入力します。
| 


ユーザーの作成と権限
========================================

| 
| データベースに直接root権限でアクセスするのは危険です。
| 公開されているサービスで使われているmySQLでroot権限を悪質なユーザーに
| 乗っ取られた場合、取り返しのつかない事態になります。
| また、誤操作やバグによる事故を防ぐためにも権限は最小に設定しておく必要があります。


ユーザーを作成する
-------------------------------------

| 名前が「yamada」、パスワードが「pass」のユーザーを作成するには

.. code-block:: mysql

    CREATE USER yamada IDENTIFIED BY [PASSWORD] 'pass';

| このようにします。


権限を与える
------------------------------------

| 作成したユーザーに適切な権限を与えましょう。

.. code-block:: mysql

    mysql> GRANT 権限 ON 範囲 TO ユーザー名;

このようにして権限を与えることができます。
例えば、「yamada」と言うユーザーに、「test_db」という名前のデータベースを操作できる全権限「ALL」を与える場合は。

.. code-block:: mysql

    mysql> GRANT ALL ON test_db.* TO yamada;

となります。


作成したユーザーでアクセスする
------------------------------------------------

| 一度、exitを実行してmySQLを終了後、rootの時と同様に、ログインすることができます。
| 以後の作業は、作成した新しいユーザーで行うようにしましょう。


データ型
======================================

| 
| データベースでは、全ての列（カラム）の型を指定します。
| 型の選び方は

 * 格納する予定のデータの種類にあった型
 * 格納する予定の最大のデータが入る型で、なるべく小さいもの

| この２つを意識して選びましょう。
| 
| MySQLで利用可能な型は

 * 数値型
 * 文字列型
 * 日時型

| などです。


数値型
--------------------------

================================== ============ ======================================================== ==============================
 型                                  説明          範囲                                                      オプション
================================== ============ ======================================================== ==============================
 INT(桁数)                           整数          -2147483648 〜 2147483647                                桁数の指定も可
 DOUBLE(桁数,小数点以下の桁数)      浮動小数点     -1.7976931348623157E+308 〜 -2.2250738585072014E-308     桁数と小数点以下の桁数の指定も可
================================== ============ ======================================================== ==============================

| INT(6)のように表記することで、6桁以下と指定することが可能です。
| 数値型はこれ以外にも多数存在しますが、ここでは省略します。


文字列型
--------------------------

================ ============= ========================= ==============================
 型                説明           範囲                        オプション
================ ============= ========================= ==============================
 CHAR(文字数)     固定長文字列    0 〜 255 文字              文字数を指定して使います
 VARCHAR(文字数)  可変長文字列    0 〜 255 文字              文字数の指定も可
 TEXT(バイト数)    文字列         最大65,535バイトまで        バイト数の指定も可
================ ============= ========================= ==============================


| 65,535バイトを超える場合にはMEDIUMTEXT、LONGTEXTなどを使用します。
| 


日付型
-------------------------

================ ============= =========================
 型                説明           形式                    
================ ============= =========================
 DATE            年月日          YYYY-MM-DD             
 DATETIME        可変長文字列     YYYY-MM-DD HH:MM:SS
 TIME            時刻            HH:MM:SS       
================ ============= =========================




テーブルの作成方法
===============================================

| テーブルを作るときにはMySQLで、use文をデータベースに予め接続してください。
| テーブルはデータベースの中に作成されます。

テーブルを作成する
--------------------------------------

.. code-block:: mysql

    CREATE TABLE テーブル名(カラム名1 型名, カラム名2 型名, ...);

| このようにしてテーブルを作成することが出来ます。
| 
| 

テーブル名「member」

======== ======= ==============================
id        age     name
======== ======= ==============================
 0        25      山本健介
 1        36      川島忠
 2        82      梅沢誠信
 3        19      今井幸太
 4        45      森田和一
 5        65      花澤三郎
======== ======= ==============================


| 上記のようなデータが入ることを想定したテーブルを作成する場合はこのようになります。

.. code-block:: mysql

    mysql> create table member(id int, age int(3), name varchar(20));


テーブルの一覧を見る
-----------------------------------

.. code-block:: mysql

    mysql> SHOW TABLES;

| データベース内のテーブル一覧を見ることが出来ます。
| 

テーブルの削除
-----------------------------

| テーブルを削除する場合は、下記の通り入力します。

.. code-block:: mysql

    DROP TABLE テーブル名;


テーブルの構造を見る
-----------------------------

.. code-block:: mysql

    DESC テーブル名;

| このように実行することで、テーブルのカラム名や型を見ることが出来ます。


主キー(プライマリーキー)
-------------------------------------

| この「member」と言う名前のテーブルではidが主キーになります。

======== ======= ==============================
id        age     name
======== ======= ==============================
 0        25      山本健介
 1        36      川島忠
 2        82      梅沢誠信
 3        19      今井幸太
 4        45      森田和一
 5        65      花澤三郎
======== ======= ==============================

| 何も入力されてなくても連番が自動的に入力される機能がAUTO_INCREMENTです。
| データベースで連番を割り振ることで衝突する可能性が低くなります。
| また、PRIMARY KEY制約を使うことで、重複やNULLを格納できないようにすることが出来ます。
| 上記のテーブルにAUTO_INCREMENTの主キーを設定する場合はこうなります。

.. code-block:: mysql

    mysql> create table member(id int AUTO_INCREMENT PRIMARY KEY, age int(3), name varchar(20));




データの入れ方
==========================================


データの追加
-----------------


.. code-block:: mysql

	INSERT INTO テーブル名(カラム名1, カラム名2, ...)VALUES (カラム１に追加するデータ, カラム２に追加するデータ, ...);

| このようにしてテーブルにデータを追加することが出来ます。
|

======== ======= ==============================
id        age     name
======== ======= ==============================
 0        25      山本健介
 1        36      川島忠
 2        82      梅沢誠信
 3        19      今井幸太
 4        45      森田和一
 5        65      花澤三郎
======== ======= ==============================

| 上記の「member」と言う名前のテーブルに30歳の山田太郎を追加する場合は

.. code-block:: mysql

	INSERT INTO member(age, name)VALUES (30, '山田太郎');

| となります。
| 実行後、idがAUTO_INCREMENTだった場合はmemberの中身は下記のようになります。

======== ======= ==============================
id        age     name
======== ======= ==============================
 0        25      山本健介
 1        36      川島忠
 2        82      梅沢誠信
 3        19      今井幸太
 4        45      森田和一
 5        65      花澤三郎
 6        30      山田太郎
======== ======= ==============================


データの更新
------------------------

.. code-block:: mysql

	UPDATE テーブル名 SET カラム名 = 更新するデータ WHERE 検索条件 ;


| データの更新は上記のように行います。
| テーブル「member」の山田太郎の年齢を40歳に変更する場合は
|

.. code-block:: mysql

	UPDATE member SET age = 40 WHERE id = 6;

| のようになります。
| 

データの削除
----------------------------

.. code-block:: mysql

	DELETE FROM テーブル名;

| これを実行するとテーブル内全てのデータが削除されます。
| テーブル「member」のid=6に該当するデータのみを削除したい場合は

.. code-block:: mysql

	DELETE FROM member WHERE id=6;

| このようにwhereで条件を指定しましょう。


データの探し方
===============================


複数のテーブルを接続する
=======================================

| リレーショナルデータベースでは複数のテーブルを接続して管理することがあります。
| 
| 例えば、「誰がどの商品を注文したか」をデータベースに保存したいと思います。
| 「誰が」には、名前の他に、住所、電話番号、年齢、性別が含まれるとします。
| 「どの商品」には、商品名の他に、価格、メーカー名、型番が含まれているとします。
| 
| これを一つの表に表すとこうなります。

======== ================ ================ ================= ============== ============== ========== =========== =========== =======
 注文id     注文者氏名        注文者住所     注文者電話番号    注文者年齢     注文者性別    商品名       価格        メーカー      型番
======== ================ ================ ================= ============== ============== ========== =========== =========== =======
 0        山田太郎           藤沢市            0466000000        30              男            冷蔵庫      50000       日立        H-F1
 1        川島忠            中央区             0300000000        36              男            冷蔵庫      50000       日立        H-F1
 2        山田太郎           藤沢市            0466000000        30              男            洗濯機      40000       松下        P-S1
 3        山田太郎           藤沢市            0466000000        30              男            電池        100         三洋        S-D1
 4        山田太郎           藤沢市            0466000000        30              男            自転車      40000       松下        P-Z1
 5        山田太郎           藤沢市            0466000000        30              男            扇風機      8000        日立        H-K1
======== ================ ================ ================= ============== ============== ========== =========== =========== =======

| もし、この状態で、山田太郎の住所が変更された場合、山田太郎が注文したもの全てを書き換える必要が出てしまいます。
| また、商品の価格を変更する場合も同様です。
| 
| この状態で、さらに「商品をお気に入りに登録に登録する新機能」を追加しようとしたとします。
| すると、上記の表とそっくりな表がもう一個必要になります。
| そうなった状態で、商品名の価格が変わった場合はどうなるでしょうか？
| ２つのテーブルの該当するデータを全て書き直す必要があります。
| これではあまりにも非合理的です。

| そこで、リレーショナルデータベースではこのような場合、複数のテーブルで管理するのが一般的です。
| 

user

======== =========== ========== ============== ========== ========== 
 id        氏名        住所         電話番号        年齢       性別 
======== =========== ========== ============== ========== ==========
 0        山田太郎      藤沢市      0466000000    30          男   
 1        川島忠        中央区      0300000000    36          男   
======== =========== ========== ============== ========== ==========


product

======== ========== =========== =========== =======
 id        商品名       価格       メーカー     型番
======== ========== =========== =========== =======
 0        冷蔵庫      50000       日立        H-F1
 1        洗濯機      40000       松下        P-S1
 2        電池        100         三洋        S-D1
 3        自転車      40000       松下        P-Z1
 4        扇風機      8000        日立        H-K1
======== ========== =========== =========== =======


order

======== ============= =============
 id       user_id       product_id
======== ============= =============
 0        0             0
 1        1             0
 2        0             1
 3        0             2
 4        0             3
 5        0             4
======== ============= =============
 
 
| このようにすることで、山田太郎の住所や商品の価格が変更されても変更するのは一箇所で済むようになります。
| orderのテーブルには、ユーザーidと商品idが含まれています。
| このIDをたどることで、必要なデータにアクセスすることが出来ます。
| これを 【外部キー】と言います。


外部キー制約
-------------------

    .. note::
       外部キー制約はInnoDB型テーブルでのみ利用できます。


| 外部キーをMySQLで管理する仕組みとして、外部キー制約があります。
| 

.. code-block:: mysql

    CREATE TABLE テーブル名(カラム名 データ型,FOREIGN KEY (このテーブルで外部キー制約するカラム名)REFERENCES 参照するテーブル名(参照するテーブルのカラム名));

| テーブルを作成するときに、このようにすることで、外部キー制約をすることができます。
| 
| 上記のuser、product、orderの場合は、orderからuserとproductを参照します。
| この場合は、注文のテーブルを作成する時に

.. code-block:: mysql

    CREATE TABLE order(id INT,user_id INT,product_id INT,
	FOREIGN KEY (user_id)REFERENCES user(id),
	FOREIGN KEY (product_id)REFERENCES product(id),
	);

| こうすることで、参照先のテーブルに存在しないIDを入れることを出来なくすることが出来ます。 
| また、参照先で他のテーブルから参照されているデータを削除するとエラーになります。




phpmyadmin
====================================

| ここまでMySQLをコマンドで操作する方法を解説してきましたが、
| ブラウザ上からグラフィカルインターフェースでMySQLを操作するツールもあります。
| それが、phpmyadminです。
| 

.. image:: /_static/phpmyadmin.png
    :height: 300px


| XAMPPやMAMPにはデフォルトでインストールされているので、是非使ってみてください。
| 
