====================
 PDO入門
====================

PDOとは
============================

PDO(PHP Data Objects)はPHPに標準搭載されているデータベースアクセス抽象化ライブラリです。
データベースの違いを吸収し、共通の関数でデータベースを操作することを可能にしています。


データベースへの接続
==========================


プリペアドステートメントとクエリの実行
======================================


結果の取得
================


プリペアドステートメントを使わないクエリの実行
=================================================


エラー処理
=====================

| PDOには3つのエラー処理方法があります。
| デフォルトは PDO::ERRMODE_SILENT です。
| **PDOオブジェクト** に対してsetAttributeメソッドでエラーモードをセットすることで
| 設定することができます。
|
| 例：


     .. code-block:: php

	<?php
	$pdoObject = new PDO('mysql:dbname=testbase;host=localhost;port=8889', 'testuser', 'pass');
	$pdoObject->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);



PDO::ERRMODE_SILENT
---------------------------

| PDOはエラーコードのみを設定します。
| そのエラーコードを取得するには、errorCodeメソッドとerrorInfoメソッドをPDOオブジェクトかPDOStatementオブジェクトに対して実行します。


PDO::ERRMODE_WARNING
---------------------------

| これを設定すると、PHPでは伝統的なE_WARNINGメッセージを出力します。デバック時に有効です。


PDO::ERRMODE_EXCEPTION
---------------------------

| PDOException をスローします。
| このモードが有用である理由のひとつとして、伝統的な PHP 形式の警告よりも より明確にエラー処理コードが書けることがあります。
| 例外を発生させず、 データベースへのコールのたびに毎回明示的に返り値をチェックすることに 比べると、コードの量やネストを減らすことができます。

| PDOExceptionはRuntimeExceptionを継承した例外クラスです。
| PDOの内部で発生した例外を表します。
| ユーザー自身が書いたコードからPDOExceptionをスローしてはいけません。

| PDOExceptionのgetCodeメソッドを実行することで、SQL文を取得可能です。

| 例：


     .. code-block:: php

	<?php
	try {
	    //PDOはtry~catch構文の内側で実行します。
	    $pdoObject = new PDO('mysql:dbname=testbase;host=localhost;port=8889', 'testuser', 'pass');
	    $pdoObject->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	} catch (PDOException $e) {
	    echo '接続に失敗しました: ' . $e->getMessage();
	}


