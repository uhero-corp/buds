==========
情報基礎
==========

ここでは情報に関する基礎的な用語やコンピュータの仕組みについて解説していきます。



情報の基礎理論
==========================

**【2進数】**

 | 2進数とは、数を"0"と"1"の2つの文字の組み合わせで表現したものです。
 | コンピュータの内部では「電圧が高い/低い」という2つの状態を使ってデータを管理しており、これを表現するために最適な方法が2種類の値を持つ2進数です。


**【16進数】**

 | 16進数とは、数を16個の文字を用いて表現したものです。16進数の1桁は、2進数の4桁に相当します。
 | コンピュータでは、2進数8桁のデータをひとつの単位として扱うことが多いので、16進数はコンピュータ上のデータを扱う上で非常に効率が良くなります。16進数では、"0"から"9"までの数字のほかに"A"から"F"までのアルファベットを使って数を表現します。


                         ===========  ===========  ===========
                           2進数         10進数         16進数
                         ===========  ===========  ===========
                                0         0             0
                                1         1             1
                               10         2             2
                               11         3             3
                              100         4             4
                              101         5             5
                              110         6             6
                              111         7             7
                             1000         8             8
                             1001         9             9
                             1010        10             A
                             1011        11             B
                             1100        12             C
                             1101        13             D
                             1110        14             E
                             1111        15             F
                            10000        16            10
                            11111	      31            1F
                           100000	      32            20
                           111111	      63            3F
                          1000000	      64            40
                          111111        127            7F
                          10000000      128            80
                          11111111      255            FF
                         100000000      256           100
                         ===========  ===========  ===========



**【文字コード】**

 | 文字化けを経験したことがある人は多いと思います。
 | その文字化けを生じる原因になっているのが、文字コードの違いです。

 |  文字コードとは文字の表現形式で、ある"文字セット"に対する"符号化方法"の事です。

 |  **文字セット** とは、その名のとおり文字の集合体を表すもので、例えば以下の文字を複数組み合わせたものです。

     | * 半角英数
     | * 半角カナ
     | * 日本語
     | * ラテン語
 
 
 | 文字セットの具体例として、以下があります。
 
    ==================  =========================================================
    **JIS X0201**        |  半角英数、半角カナ、日本語の集合体
    **Unicode**          |  世界中で使われるすべての文字
    ==================  =========================================================


 | **符号化方法** とは、文字セットの各文字に対して、どのようにして数値を当てはめるか定めたものです。
 
    ==================  ========================================================================================
     **ASCII**           | 半角英数の符号化方法。すべての文字は7バイトで表現される。
     **Shift_JIS**       | JIS X0201の符号化方法。半角英数と半角カナは1バイト、その他の日本語は2バイトで表現される。
     **EUC**             | JIS X0201の符号化方法。半角英数以外のすべての文字が2バイトで表現される。
     **Unicode**         | Unicode(文字セット)の符号化方法のひとつ。すべての文字が2バイトで表現される。
                         | 文字セットのUnicodeと文字コードのUnicodeは別の概念であることに注意すること。
     **UTF-8**           | Unicodeの符号化方法のひとつ。XMLの仕様では標準の文字コードとされている。
                         | 半角英数が1バイトで済むように工夫されているが、日本語を表現するためには3バイト必要である。
    ==================  ========================================================================================




ハードウェア
==========================

コンピュータは主に以下の5パーツで構成されており、一般に五大装置と呼ばれています。

**【入力装置】**
  | コンピュータに処理させるデータやプログラム、操作などを入力するための装置です。
  | 最も代表的なものはキーボードとマウスで、他にもタッチパネルなどが挙げられます。
  
**【出力装置】**
  | コンピュータで処理した結果や途中経過を出力するための装置です。
  | 最も代表的なものにはディスプレイ、ステレオ装置、プリンタなどが挙げられます。
  
**【記憶装置】**
  | 記憶装置は、コンピュータ本体の中でシステムの稼働中に使用される"主記憶装置"とそれを補う形の"補助記憶装置"とに分けられます。
  | 主記憶装置は一般的にメモリ（memory）と呼ばれる装置であるのに対し、補助記憶装置は、主記憶装置の容量不足を補うため
  | あるいはシステムが稼働していないときの保存のために、外部の媒体（メディア）に記憶しておく役割を持ちます。
  | 補助記憶装置は種類が非常に豊富で、代表的なものにハードディスク、CD、DVD、フラッシュメモリなどがあります。
  
**【演算装置】**
  | 演算装置には、算術演算装置（arithmetic unit）と論理演算装置（logic unit）と呼ばれるものがあります。
  | これらを一括して算術論理演算装置（Arithmetic and Logic Unit）といい、省略してALUと呼ぶこともあります。
  | コンピュータはよく「計算機」と言われますが、実際にその計算を行っているのがこの演算装置です。
  
**【制御装置】**
  | コンピュータを動作させるプログラムを解析し、入力装置、出力装置、記憶装置、演算装置に制御信号を出す装置です。
  | 演算装置とこの制御装置がコンピュータの心臓部であり、この2つをあわせて中央処理装置（CPU：Central Processing Unit
  | あるいは単に処理装置（プロセッサ：Processor）と呼びます。


ソフトウェア
==========================

| ソフトウェア(software)という言葉は、先ほどあげた五大装置のようなハードウェア(hardware)と対比する言葉であり、それをもじった造語です。
| 一般的には、道具そのものをハードウェア、その道具の使い方をソフトウェアといいます。
| ITの分野でハードは「機械そのもの」、「ソフト」はプログラムなどの目には見えないものを指す場合がほとんどです。


OS
==========================

**【OS】**

| OSとは、Operateing Systemの略称です。コンピュータ資源（システム資源）を効率よく実行させるためのソフトウェアの集まりであり、コンピュータシステム全体を管理するソフトウェアなのです。
| 代表的なOSとして有名なものは、
| * Windows
| * Mac OS
| * UNIX
| * Linux
| 等が挙げられます。

**【API】**

| APIとはApplication Program Interfaceの略称で、ソフトウェア開発を容易にするためにあらかじめ提供されているプログラムの部品のことです。
| 多くのソフトウェアに共通して用いられるような機能等をあらかじめ用意しておくことで開発の負担を減らしたり、データをコンパクトにしたりきます。

**【プログラム】**

| プログラム言語というのは、コンピュータに対する一連の動作の指示を記述するための人工言語の総称です。
| この一連の指示をプログラムと呼びます。

| プログラム言語は以下の４種類に大別されます。
| * 汎用プログラム言語
| * スクリプト言語
| * 第４世代言語
| * 特殊問題向き言語

| ちなみに、HTML等はプログラム言語ではありません。

| そしてそのプログラム言語はさら２種類、低水準言語と高水準言語に分けることができます。
| 低水準言語とはコンピュータが理解しやすい機械語、またはより機械語に近い形式で記述されるプログラム言語のことを指します。
| そして高水準言語とは、より人間の言語表現に近い形式で記述されるプログラム言語のことを指します。

| 有名なプログラム言語を大別すると以下のようになります。

| * 汎用プログラム言語
|   低水準言語:アセンブラ語
|   高水準言語：C、JAVA

| * スクリプト言語
|   PHP、Perl、Javascript


ディレクトリ構造
==========================

| ここではディレクトリにまつわることを解説します。
| **ディレクトリ** とは、パソコンで使われているMS-DOSやUNIXといったOSにおけるファイル管理の単位のことです。
| WindowsやMacではディレクトリよりも"フォルダ"という名称の方が親しみがあるかもしれません。
| ディレクトリにはファイルの管理情報が記録されており、ファイルの読み書きはこの管理情報を通じて行われます。
| 3種類のディレクトリを簡単に解説します。 

**【ルートディレクトリ】**
  | 最上位のディレクトリのことです。ルートディレクトリは常に1つしかありません。

**【サブディレクトリ】**
  | ルートディレクトリの下層にある複数のディレクトリのことです。
  | ユーザが自由に作成でき、サブディレクトリの中にはファイルやディレクトリをさらに作ることができます。

**【カレントディレクトリ】**
  | ユーザが現在の作業を行っているディレクトリのことです。ユーザの作業状況によってカレントディレクトリの位置は変化します。
  
  
| また、 **パス** というのも重要なワードです。
| ファイルやディレクトリまでの経路のことをパス(path)と呼んでいます。
| 目的のファイルやディレクトリを指定するときは、その位置をパス指定します。
| パスには主に２種類の記述があります。


**【絶対パス】**
  | パス指定のやり方の1つで、ルートディレクトリから指定します。
  | カレントディレクトリに関係なく、位置が一意に決まります。

**【相対パス】**
  | パス指定のやり方の1つで、カレントディレクトリから指定します。
  | カレントディレクトリからの相対的なパスなので、位置が一意に決まらない。


データベース
==========================

| データベースが登場するまで、ファイルはプログラムごとに管理されていたため、
| 各ファイル間にかなりのデータの重複が見られ、データの更新のずれにより
| ファイル間のデータの不一致といった問題を引き起こすことが多くありました。
| そこで、個別に作成していたファイルを整理し、一元化することでデータの共用化と
| プログラムからの独立性を図り、データの質と安全性を向上させようという考えが生まれたのです。

| データベースで、データ構造やコンピュータ操作をどのようにするか決めたものをデータモデルです。
| データモデルには階層モデル、網モデル、関係モデルの３つがあります。
| 現在一般的に使用されているのは関係モデルであり、そのデーターベースをリレーショナルデータベースと呼んでいます。

**【関係モデル】**

  | 二次元の表構造によってデータ構造を表現したものです。
  | 表の列を属性(attribute)、行を組(tuple)と呼び、属性と組で構成された表を関係(relational)と定義します。


       ===== ===== ===== =====
          　    列    列    列
       ===== ===== ===== =====
         行
         行
         行
       ===== ===== ===== =====


  | １つの表の中で各組すべて、その値がことなるものが主キー(primary key)です。
  | この主キーの値は重複しない、空ではないという実態の完全性を持ち、
  | 通常、通し番号(学籍番号とか商品番号など)が主キーに相当します。
  | また、主キーが他の表の属性として使われているとき、その属性を外部キー(foreign key)といいます。
  | 主キーと外部キーは、
  | **「表Aに主キー、表Bに外部キーがある場合、Bの属性欄のデータはAの属性欄の値として必ず存在しなければならない」**
  | という参照の完全性が成立します。
  | 使いやすさ、システムの柔軟性、拡張性などの利点から現在、
  | 関係モデルのリレーショナルデータベース(Relational DataBase：RDB)は
  | パソコンをはじめさまざまなコンピュータ上で広く利用されています。
  
**【データベースマネージメントシステム】**

| データベースを作成し、保守・管理するソフトウェアをDBMSといいます。
| DBMSには、データベースを定義する機能、データベースのデータを効率よく操作する機能、
| データベースのデータを保護する機能などがあります。   
| このシステムによってデータベースをガードし、ユーザは直接データに触れることなく
| 必要な情報を入手できるようになりました。また、DBMSの働きでユーザが自分のプログラムに
| データやファイルに関する記述をする必要がなくなり、DBMSに直接対話することで、
| データベースへのデータの受け渡しが可能となりました。この対話は、データベース言語によって行われます。

**【SQL (Structured Query Language)】**

| SQLはリレーショナルデータベースを操作するための言語で、
| データの定義言語（SQL-DDL）とデータの操作言語（SQL-DML）から成ります。
| SQLは独立言語方式で利用できるほか、Cなどの高水準言語にSQLを埋め込んで利用する親言語方式もあります。
| この単元でのポイントは、
| * データベースを操作するための言語のことをSQLという
| * SQLにはデータ定義言語とデータ操作言語がある
| * 他のプログラム言語などからも使うことができる
| という点です。

ネットワークシステム
==========================

情報システムのセキュリティ
==========================
