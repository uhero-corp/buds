=========================================
Javascript
=========================================




条件分岐
==========

**if文**

if文は以下のように記述します。

.. code-block:: none

   if (条件) {
   　処理A;
   } else {
   　処理B;
   }


条件に合致した場合は処理Aを、合致しなかった場合は処理Bを実行します。else節以降を外して、

.. code-block:: none

   if (条件) {
   　処理A;
   }


| とすれば、条件に合致したときにのみ実行する処理を記述可能です。
| 「**もし条件ならば、処理Aを実行する。条件でなければ、処理Bを実行する**」ということです。
| 例として、与えられた数字が偶数であるかを判定するプログラムを作成します。



   .. code-block:: javascript

       var a = 10;          // 変数aを定義し、10を代入
       if ( a % 2 == 0 ) {        // もし変数iを2で割った余りが0であれば、以下の処理を実行
           alert("偶数");     // アラートで「偶数」と表示
       } else {               // 上記条件に当てはまらなければ、以下の処理を実行
           alert("奇数");     // アラートで「奇数」と表示
       }



この条件式の中に含まれている==ですが、これは等しいことを表す演算子です。左右の値が同じであれば、条件に合致したと見なされます。
この場合、条件式が真であるといいます。


**比較演算子**

これらの演算子は比較演算子と呼ばれ、以下のようなものがあります。


====== ========
 符号   説明
====== ========
 \==    等しい
 !=     異なる
 <      小なり
 >      大なり
 <=     以下  
 >=     以上  
====== ========


**論理演算子**

さらに複雑な条件式を組むために、論理演算子が使用できます。

===== =====
 &&    AND 
 \||   OR  
===== =====

例えば、aが偶数かつ100より大きい、という条件を作る場合は、

.. code-block:: none

   a % 2 == 0 && a > 100


と書くことが出来ます。


**elseif文**

if文をさらに高度にさせた文に、elseif文があります。if文のelseの場合、さらに条件分岐をさせるものです。

.. code-block:: none

   if (条件式A) {
     処理A;
   } else if (条件式B) {
     処理B;
   } else {
     処理C;
   }


条件式Aが真の場合は処理A、条件式Aが偽の場合で条件式Bが真の場合はB、どちらも偽の場合はCが実行されます。else ifをたくさんつなげて、より高度な処理を行なうことも可能です。
