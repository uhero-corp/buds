=========================================
JavaScript入門
=========================================

Hello, World!
=======================

| それではJavaScriptについて勉強していきたいと思います。
| JavaScriptはHTML内に記述することができます。
| headタグ内、もしくはbodyタグ内に下記のような記述をしたHTMLファイルを作成してみてください。

    .. code-block:: html
	
	   <script type="text/javascript">
	   <!--
	   document.write("Hello, World!");
	   // -->
	   </script>
	   
| 作成したHTMLファイルをブラウザで確認してみましょう。
| Hello, World! と表示されたら成功です。
|  

外部JavaScriptファイル(.js)
------------------------------

| JavaScriptもCSSと同様に、基本的にHTMLファイルから分離させます。
| 以下の１行を書いたファイルをsample.jsという名前で作成してください。

    .. code-block:: js
	
	  document.write("It Works!!");
	  
	  
| そして、このjsファイルを読み込むためのHTMLファイルを作成します。
| hello.jsと同じ階層に以下のようなファイルを作成してください。

     .. code-block:: html
	 
	   <script type="text/javascript" src="sample.js"></script>
	
| うまく外部ファイルを読み込めましたでしょうか？
| It Works!!と表示されたら成功です。


繰り返し文
==========================

| プログラムを書いていると、ループ(繰り返し)をさせて複数の項目の表示を行いたいことがあります。
| 例えば1〜99までの連番を表示させたいとき、いちいち手入力で入力するよりもループさせた方が確実に早いです。
| 繰り返し文の表記にはwhile文とfor文の2種類があります。

while文
------------

| while文は条件式が真の間だけ、処理を繰り返し実行するものです。

 .. code-block:: js
 
     while (条件式) {
         処理;
     }
	 
	 
| 以下は"ありがとう"を100回表示するプログラムです。

 .. code-block:: js
 
   var i = 0;                         // 変数iを定義して0を代入
   while (i < 100) {                   // 変数iが100未満であれば処理を実行、100より大きければ処理を実行せずループを終了
       document.write("ありがとう");    // 「ありがとう」と表示する
       i++;                           // 変数iに1を加算する
   }                                  // 条件式へ戻る



| 処理を実行する度に変数iを1ずつ増やして、変数iが100未満の間だけ処理を実行するようにしています。

 .. code-block:: js
 
    while (1 == 1){
        document.write("ありがとう");
    }
	
| 上記のように必ず真になる条件式を設定してしまうと、永遠に"ありがとう"を表示し続けるプログラムが作成されてしまいます。
| こういった場合は、どこかでif文を組み込み、「break」という命令を入力することで処理を中断させることができます。

 .. code-block:: js

    var i = 0;                   // 変数iを定義して0を代入
    while (1 == 1){               // 1 == 1 は真となるので必ず処理を実行
        document.write("ありがとう");    // 「ありがとう」と表示する
        i++;                       // 変数iに1を追加する
        if(i > 100){               // もし変数iが100より大きければ以下の処理を実行
            break;                   // ループを終了
        }
    }                            // 条件式へ戻る
	
| while文は無限ループの原因になりやすいので、条件式をきちんと設定するように気をつけましょう。


for文
------------

| while文以外のもうひとつの繰り返し処理の例が、for文です。
| for文は継続条件式が真の間繰り返し実行されるというものです。定義は以下の通りです。

 .. code-block:: js
 
    for(初期化式; 継続条件式; 再初期化式){
        処理;
    }
	
	
| こう書くととても難しいように見えますが、実際的には、限られた回数だけ処理を行ないたい場合、while文より便利です。
| 処理の流れを見てみましょう。
| 
| 1.「初期化式」を実行
| 2.「継続条件式」で真と判定された場合に内部の処理を実行、判定結果が偽の場合ループを終了
| 3.「再初期化処理」を実行 
| ※以降2,3の繰り返しとなります。
| 
| 例えばwhileの例であった、「ありがとう」を100個表示するプログラムをfor文で記述してみましょう。

 .. code-block:: js

                                       // 変数iを定義し0を代入 ※ループの初回のみ実行される
    for (var i = 0; i < 100; i++){      // 変数iが100未満だったら以下の処理を実行、変数iが100より大きければ処理を実行せずにループを終了
        document.write("ありがとう");    // 「ありがとう」と表示する
    }                                  // 変数iに1を加算し、継続条件式へ再び「i < 100」が真となるか判断する。
	

ネスト
---------------

| if文の中にif分を書き込むことができるように、
| 繰り返し処理も、何重にも記述することができます。

 .. code-block:: js

    for (var i = 0; i < 100; i++){
        for (var j = 1; j <= 100; j++){
            document.write(j);
        }
    } 

| この場合、1から100までの連番が100セット表示されます。


課題
------------ 

| ①while文を使って、xの3乗の値を表示させて下さい。xの定義域は-10〜10とします。
| 
| **出力例**
| x = -10のとき, y = -1000
| x = -9のとき, y = -729
| 〜〜〜〜〜省略〜〜〜〜〜
| x = 10のとき, y = 1000
|  
| ②for文をネストさせて、使って九九の表を作ってください。

.. code-block:: js

    for(var i = 1; i <= 9; i++){
        for(var j = 1; j <= 9; j++){
        }
    }

.. note::

  | 適切なHTMLタグと文字を出力する処理を書き込めば、tableで表を出力できます。
  | tableの作り方を思い出してみてください。テーブルは行の場合は<td>、列の場合は<tr>を使います。
  | つまり、改行したい時には<tr>タグで囲んでいる部分が新しくなればいいわけです。
  | **出力例**
  
.. raw:: html
   
    <script>
        for (var i = 1; i <= 9; i++){
		    document.write("<table><tr>");
            for(var j = 1; j <= 9; j++){
                document.write("<td>" + i*j + "</td>");
            }
			document.write("</tr></table>");
        }
	</script>


